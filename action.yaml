name: Build and push container images
description: Build and push container images
author: Kevin Tijssen (TNO)

inputs:
  command: 
    description: 'What do you want to do? (build/push/buildAndPush)'
    required: true
    default: 'build'
  dockerfile:
    description: 'Name of the Dockerfile (Default is $GITHUB_WORKSPACE/.)'
    required: false
    default: '$GITHUB_WORKSPACE/.'
  name:
    description: 'Image Name'
    required: false
    default: '$GITHUB_WORKFLOW'
  registry:
    description: 'The name of the registry server'
    required: false
    default: ''
  repo:
    description: 'The name of the repository'
    required: false
    default: ''
  tags:
    description: 'Image tag, default $GITHUB_SHA'
    required: false
    default: '$GITHUB_SHA'

runs:
  using: "composite"
  steps:

    - name: Buildah Build / Push / Build & Push
      shell: bash
      run: |
        case ${{ inputs.command }} in
            (build|push|buildAndPush|cleanup) ;;
            (*) echo "ERROR: invalid variable '${{ inputs.command }}' for 'command'. Allowed variables are 'build, push, buildAndPush, cleanup'";
            exit 1;;
        esac

        function build() {
          for tag in $(echo ${TAGS} | sed 's/,/ /g'); do
            # Generate complete containerTag
            if [ -z ${{ inputs.registry }} ]; then
              containerTag="${NAME}:${tag}"
            else
              containerTag="${{ inputs.registry }}/${NAME}:${tag}"
            fi
            if ! [[ ${tag} == "latest" ]]; then
              # Run Buildah build
              buildah bud -t $containerTag ${{ inputs.dockerfile }}
            else
              imageId=$(buildah images --filter=reference=${NAME} --format "{{.ID}}" | head -1)
              buildah tag ${imageId} ${containerTag}
          done
        }

        function push() {
          for tag in $(echo ${TAGS} | sed 's/,/ /g'); do

            # Generate complete containerTag
            if [ -z ${{ inputs.registry }} ]; then
              containerTag="${NAME}:${tag}"
            else
              containerTag="${{ inputs.registry }}/${NAME}:${tag}"
            fi

            # Run Buildah push
            buildah push $containerTag
          done
        }

        function cleanup() {
          buildah rmi --all --force
        }

        if [[ ${GITHUB_REF_NAME} == "main" || ${GITHUB_REF_NAME} == "master" ]]; then
          TAGS="${{ inputs.tags }}, latest"
        else
          TAGS="${{ inputs.tags }}"
        fi

        echo ${TAGS}

        if [ -z ${{ inputs.repo }} ]; then
          NAME="${{ inputs.name }}"
        else
          NAME="${{ inputs.repo }}/${{ inputs.name }}"
        fi

        if [[ ${{ inputs.command }} == "build" ]]; then
          build
          cleanup
          exit 0
        elif [[ ${{ inputs.command }} == "push" ]]; then
          push
          cleanup
          exit 0
        elif [[ ${{ inputs.command }} == "buildAndPush" ]]; then
          build
          push
          cleanup
          exit 0
        fi